version: "3.8"

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-product_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Test Database Service (for running tests)
  test-db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${TEST_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${TEST_POSTGRES_DB:-product_test_db}
    ports:
      - "${TEST_DB_PORT:-5433}:5432"
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

    # Node.js API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-8080}
      HOST: ${HOST:-0.0.0.0}
      SECRET_TOKEN: ${SECRET_TOKEN:-SECRET_TOKEN}

      # Database connection
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      DB_DATABASE: ${POSTGRES_DB:-product_db}

      # Test database connection
      TEST_DB_HOST: test-db
      TEST_DB_PORT: 5432
      TEST_DB_USERNAME: ${TEST_POSTGRES_USER:-postgres}
      TEST_DB_PASSWORD: ${TEST_POSTGRES_PASSWORD:-password}
      TEST_DB_DATABASE: ${TEST_POSTGRES_DB:-product_test_db}
    depends_on:
      db:
        condition: service_healthy
      test-db:
        condition: service_healthy
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - VITE_API_URL=http://localhost:${API_PORT:-8080}
    depends_on:
      - api
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  product-network:
    driver: bridge
